name: CI/CD Pipeline

on:
  push:
    branches:
      - feature-testing
      - main
      - develop
  pull_request:
    branches:
      - feature-testing
      - main
      - develop

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build Rust project
      run: |
        cargo build --verbose
        
    - name: Run Rust tests
      run: |
        cargo test --verbose
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install maturin
        
    - name: Build Python bindings
      run: |
        maturin build --release
        
    - name: Install Python package
      run: |
        pip install target/wheels/*.whl
        
    - name: Run Python tests
      run: |
        pytest tests/ -v --tb=short
        
    - name: Run CLI tests
      run: |
        ./target/release/dpa --help
        ./target/release/dpa profile --help

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/feature-testing' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Build release binaries
      run: |
        cargo build --release --bin dpa
        
    - name: Build Python wheel
      run: |
        pip install maturin
        maturin build --release
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dpa-binaries
        path: |
          target/release/dpa
          target/wheels/*.whl
        retention-days: 30

  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/feature-testing' || github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    concurrency:
      group: "pages"
      cancel-in-progress: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        
    - name: Build documentation
      run: |
        mkdocs build
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './site'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [build, docs]
    if: always() && (github.ref == 'refs/heads/feature-testing' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Deployment Status
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "ðŸ“š Documentation: ${{ needs.docs.outputs.page_url || 'https://ashraf0001.github.io/dpa-full-regenerated/' }}"
        echo "ðŸ“¦ Artifacts: Available in GitHub Actions artifacts"
