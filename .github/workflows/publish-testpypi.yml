name: Publish to TestPyPI

on:
  push:
    branches:
      - feature-testing
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.2.2)'
        required: false
        default: ''

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build Rust project
      run: |
        cargo build --verbose
        
    - name: Run Rust tests
      run: |
        cargo test --verbose
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install maturin
        
    - name: Build Python bindings
      run: |
        maturin build --release
        
    - name: Install Python package
      run: |
        pip install target/wheels/*.whl
        
    - name: Run Python tests
      run: |
        pytest tests/ -v --tb=short
        
    - name: Run CLI tests
      run: |
        ./target/release/dpa --help
        ./target/release/dpa profile --help

  build-and-publish:
    name: Build and Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/feature-testing'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin build twine
        
    - name: Get version from Cargo.toml
      id: get_version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Build Rust binary
      run: |
        cargo build --release --bin dpa
        
    - name: Build Python wheel
      run: |
        maturin build --release
        
    - name: Build Python CLI package
      run: |
        cd python
        python -m build
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## 🚀 Release v${{ steps.get_version.outputs.version }}
          
          ### 📦 What's New
          - TestPyPI release for testing
          - Built from feature-testing branch
          
          ### 🔧 Installation
          ```bash
          # Install from TestPyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ dpa-cli
          ```
          
          ### 📋 Changes
          - Automated TestPyPI publishing
          - Enhanced CI/CD pipeline
          - Repository renamed to data-processing-accelerator-dpa
          
          ### 🧪 Testing
          This is a TestPyPI release for testing purposes.
        draft: false
        prerelease: true
        
    - name: Publish Rust binary to GitHub Releases
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/release/dpa
        asset_name: dpa-${{ steps.get_version.outputs.version }}-x86_64-unknown-linux-gnu
        asset_content_type: application/octet-stream
      if: steps.create_release.outputs.upload_url != ''
        
    - name: Publish Python wheel to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        twine upload --verbose target/wheels/*.whl
        
    - name: Publish Python CLI to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: |
        twine upload --verbose python/dist/*.whl python/dist/*.tar.gz

  notify:
    name: Notify TestPyPI Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: always() && github.ref == 'refs/heads/feature-testing'
    
    steps:
    - name: TestPyPI Release Status
      run: |
        echo "🎉 TestPyPI Release completed successfully!"
        echo "📦 Package: dpa-cli"
        echo "🔗 TestPyPI: https://test.pypi.org/project/dpa-cli/"
        echo "📋 Installation: pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ dpa-cli"
        echo "🏷️  Version: ${{ needs.build-and-publish.outputs.version || 'latest' }}"
        echo "🌿 Branch: feature-testing"
