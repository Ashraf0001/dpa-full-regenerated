use clap::{Arg, Command};

pub fn build_cli() -> Command {
    Command::new("dpa")
        .about("Data Processing Accelerator (Rust + Polars)")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(Command::new("schema")
            .about("Print schema of a file")
            .arg(Arg::new("input").required(true)))
        .subcommand(Command::new("head")
            .about("Preview first N rows")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("n").short('n').long("n").default_value("10")))
        .subcommand(Command::new("filter").alias("f")
            .about("Filter rows with an expression and (optionally) select columns")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("where").short('w').long("where").required(true))
            .arg(Arg::new("select").short('s').long("select").required(false))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("select").alias("s")
            .about("Select columns")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("columns").short('c').long("columns").required(true))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("convert").alias("c")
            .about("Convert between CSV and Parquet")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("output").required(true)))
        .subcommand(Command::new("profile").alias("p")
            .about("Enhanced data profiling with statistics and quality metrics")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("sample").short('s').long("sample").default_value("1000000")
                .help("Sample size for profiling (default: 1M rows)"))
            .arg(Arg::new("detailed").short('d').long("detailed").num_args(0)
                .help("Show detailed statistics including percentiles and value distributions")))
        .subcommand(Command::new("agg").alias("a")
            .about("Groupby aggregations")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("group").short('g').long("group").required(true))
            .arg(Arg::new("sum").long("sum").num_args(0..))
            .arg(Arg::new("mean").long("mean").num_args(0..))
            .arg(Arg::new("count").long("count").num_args(0..))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("join").alias("j")
            .about("Join two datasets")
            .arg(Arg::new("left").required(true))
            .arg(Arg::new("right").required(true))
            .arg(Arg::new("on").long("on").required(true))
            .arg(Arg::new("how").long("how").default_value("inner"))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("validate").alias("v")
            .about("Validate data quality, schema, and custom rules")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("schema").long("schema").help("JSON file with expected column types"))
            .arg(Arg::new("rules").long("rules").help("JSON file with custom validation rules"))
            .arg(Arg::new("output").short('o').long("output").help("Output file for invalid rows")))
        .subcommand(Command::new("sample")
            .about("Sample data using various methods")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("output").short('o').long("output").required(true))
            .arg(Arg::new("size").short('s').long("size").default_value("1000")
                .help("Sample size (default: 1000)"))
            .arg(Arg::new("method").short('m').long("method").default_value("random")
                .help("Sampling method: random, stratified, head, tail (default: random)"))
            .arg(Arg::new("stratify").long("stratify")
                .help("Column to stratify by (required for stratified sampling)"))
            .arg(Arg::new("seed").long("seed")
                .help("Random seed for reproducible sampling")))
        .subcommand(Command::new("split")
            .about("Split dataset into train/test sets")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("train").long("train").required(true)
                .help("Output file for training data"))
            .arg(Arg::new("test").long("test").required(true)
                .help("Output file for test data"))
            .arg(Arg::new("test-size").short('t').long("test-size").default_value("0.2")
                .help("Proportion of data for test set (default: 0.2)"))
            .arg(Arg::new("stratify").long("stratify")
                .help("Column to stratify by for balanced split"))
            .arg(Arg::new("seed").long("seed")
                .help("Random seed for reproducible split")))
}
