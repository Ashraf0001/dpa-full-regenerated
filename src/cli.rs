use clap::{Arg, Command};

pub fn build_cli() -> Command {
    Command::new("dpa")
        .about("Data Processing Accelerator (Rust + Polars)")
        .subcommand_required(true)
        .arg_required_else_help(true)
        .subcommand(Command::new("schema")
            .about("Print schema of a file")
            .arg(Arg::new("input").required(true)))
        .subcommand(Command::new("head")
            .about("Preview first N rows")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("n").short('n').long("n").default_value("10")))
        .subcommand(Command::new("filter").alias("f")
            .about("Filter rows with an expression and (optionally) select columns")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("where").short('w').long("where").required(true))
            .arg(Arg::new("select").short('s').long("select").required(false))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("select").alias("s")
            .about("Select columns")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("columns").short('c').long("columns").required(true))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("convert").alias("c")
            .about("Convert between CSV and Parquet")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("output").required(true)))
        .subcommand(Command::new("profile").alias("p")
            .about("Simple profile: count, null %, min/max (sampled)")
            .arg(Arg::new("input").required(true)))
        .subcommand(Command::new("agg").alias("a")
            .about("Groupby aggregations")
            .arg(Arg::new("input").required(true))
            .arg(Arg::new("group").short('g').long("group").required(true))
            .arg(Arg::new("sum").long("sum").num_args(0..))
            .arg(Arg::new("mean").long("mean").num_args(0..))
            .arg(Arg::new("count").long("count").num_args(0..))
            .arg(Arg::new("output").short('o').long("output").required(true)))
        .subcommand(Command::new("join").alias("j")
            .about("Join two datasets")
            .arg(Arg::new("left").required(true))
            .arg(Arg::new("right").required(true))
            .arg(Arg::new("on").long("on").required(true))
            .arg(Arg::new("how").long("how").default_value("inner"))
            .arg(Arg::new("output").short('o').long("output").required(true)))
}
